(function(c,o){typeof exports=="object"&&typeof module<"u"?o(exports,require("vue")):typeof define=="function"&&define.amd?define(["exports","vue"],o):(c=typeof globalThis<"u"?globalThis:c||self,o(c.VueMfModule={},c.Vue))})(this,function(c,o){"use strict";var Z=Object.defineProperty;var _=(c,o,g)=>o in c?Z(c,o,{enumerable:!0,configurable:!0,writable:!0,value:g}):c[o]=g;var d=(c,o,g)=>(_(c,typeof o!="symbol"?o+"":o,g),g);var g={exports:{}};function V(){}V.prototype={on:function(n,e,t){var r=this.e||(this.e={});return(r[n]||(r[n]=[])).push({fn:e,ctx:t}),this},once:function(n,e,t){var r=this;function i(){r.off(n,i),e.apply(t,arguments)}return i._=e,this.on(n,i,t)},emit:function(n){var e=[].slice.call(arguments,1),t=((this.e||(this.e={}))[n]||[]).slice(),r=0,i=t.length;for(r;r<i;r++)t[r].fn.apply(t[r].ctx,e);return this},off:function(n,e){var t=this.e||(this.e={}),r=t[n],i=[];if(r&&e)for(var s=0,l=r.length;s<l;s++)r[s].fn!==e&&r[s].fn._!==e&&i.push(r[s]);return i.length?t[n]=i:delete t[n],this}},g.exports=V;var N=g.exports.TinyEmitter=V,b=(n=>(n[n.drawer=0]="drawer",n[n.bottom=1]="bottom",n[n.header=2]="header",n))(b||{});const D={menuDefinitionAdded:"newmenuitem"},I=class I{constructor(){d(this,"menuDefinitions",[]);d(this,"menuStructure",{});d(this,"notifications",new N)}get Notifications(){return this.notifications}static get Instance(){return I.instance}addMenuDefinition(e,...t){let r=this.menuDefinitions.find(i=>i.name==e.name);r?e=r:this.menuDefinitions.push(e);for(const i of t)this.menuStructure[i.section]=this.menuStructure[i.section]||{},this.menuStructure[i.section][i.parent||e.name]=this.menuStructure[i.section][i.parent||e.name]||[],i.parent&&this.menuStructure[i.section][i.parent].push(e.name);this.notifications.emit(D.menuDefinitionAdded,e)}getMenuItem(e){return this.menuDefinitions.find(t=>t.name==e)}getMenu(e){let t=[],r=new Set;for(const i in this.menuStructure[e]){const s=this.menuStructure[e][i];let l={item:this.menuDefinitions.find(a=>a.name==i&&(!a.hidden||!a.hidden())),children:s.map(a=>this.menuDefinitions.find(u=>u.name==a&&(!u.hidden||!u.hidden()))).filter(a=>!!a).sort((a,u)=>a&&u&&a.orderIndex&&u.orderIndex&&a.orderIndex>u.orderIndex?1:a&&u&&a.orderIndex&&u.orderIndex&&a.orderIndex<u.orderIndex?-1:0)};l.item&&(r.add(i),s.forEach(a=>r.add(a)),t.push(l))}return t.filter(i=>!!i.item).sort((i,s)=>i&&s&&i.item&&s.item&&i.item.orderIndex&&s.item.orderIndex&&i.item.orderIndex>s.item.orderIndex?1:i&&s&&i.item&&s.item&&i.item.orderIndex&&s.item.orderIndex&&i.item.orderIndex<s.item.orderIndex?-1:0)}};d(I,"instance",new I);let h=I;const k=class k{constructor(){d(this,"registry",new Map);d(this,"groupedregistry",new Map);d(this,"serviceregistry",new Map);d(this,"groupedserviceregistry",new Map)}static get Instance(){return this.instance}static set Instance(e){this.instance=e}provideComponent(e,t,r){if(this.registry.set(r?`${r}-${t}`:t,e),r){this.groupedregistry.has(r)||this.groupedregistry.set(r,new Map);let i=this.groupedregistry.get(r);i&&i.set(t,e)}}getComponent(e,t){return this.registry.get(t?`${t}-${e}`:e)||null}getComponents(...e){return Array.from(this.registry.entries()).filter(t=>e.indexOf(t[0])>=0).map(t=>t[1])}getGroupComponents(e,...t){let r=this.groupedregistry.get(e);return r?Array.from(r.entries()||[]).filter(i=>!t||t.length==0||t.indexOf(i[0])>=0).map(i=>i[1]):[]}getGroupComponentsKeys(e){let t=this.groupedregistry.get(e);return t?Array.from(t.keys()):[]}provideService(e,t,r){if(this.serviceregistry.set(e,t),r){this.groupedserviceregistry.has(r)||this.groupedserviceregistry.set(r,new Map);let i=this.groupedserviceregistry.get(r);i&&i.set(e,t)}}getService(e){return this.serviceregistry.get(e)||null}getGroupServices(e,...t){let r=this.groupedserviceregistry.get(e);return r?Array.from(r.entries()||[]).filter(i=>!t||t.length==0||t.indexOf(i[0])>=0).map(i=>i[1]):[]}};d(k,"instance",new k);let f=k;const j=new Map,v=new Map,C=new Map,P=(n,...e)=>new Promise(t=>{var l;let r=(l=j.get(n))==null?void 0:l.port1;if(!r){const a=new MessageChannel;j.set(n,a),r=a.port1}let i=new MessageChannel;const s=a=>{t(a.data),i=null};i.port1.onmessage=s,r.postMessage(e,[i.port2])}),R=(n,e,t={force:!1})=>{var s;let r=(s=j.get(n))==null?void 0:s.port2;if(!r){const l=new MessageChannel;j.set(n,l),r=l.port2}if(!t.force&&r.onmessage)throw"reply already set for message "+n;const i=async l=>{const a=l.ports[0],u=await e(...l.data);a.postMessage(u),a.close()};return r.onmessage=i,()=>{r.onmessage=null}},U=(n,...e)=>{var r;let t=(r=v.get(n))==null?void 0:r.port1;if(!t){const i=new MessageChannel;v.set(n,i),t=i.port1}t.postMessage(e)},B=(n,e)=>{var i;let t=(i=v.get(n))==null?void 0:i.port2;if(!t){const s=new MessageChannel;v.set(n,s),t=s.port2}const r=s=>{e(...s.data)};return C.set(e,r),t.addEventListener("message",r),t.start(),()=>{t==null||t.removeEventListener("message",r),C.delete(e)}},S={Instance:{ask:P,reply:R,send:U,subscribe:B,once:(n,e)=>{const t=B(n,(...r)=>{e(...r),t()})},unsubscribe:(n,e)=>{var i;let t=(i=v.get(n))==null?void 0:i.port2;if(!t)return;const r=C.get(e);r&&(t.removeEventListener("message",r),C.delete(e))}}},G=o.defineComponent({name:"inject",props:{id:{default:null},type:{default:null,type:String},value:{default:null},name:{type:String,default:null},names:{type:Array,default:null},group:{type:String,default:null},metadata:{type:Object,default:null},disabled:{type:Boolean,default:!1},readonly:{type:Boolean,default:!1}},setup(n,{emit:e}){const t=o.computed({get:()=>n.value,set:l=>{e("input",l)}}),r=o.computed(()=>n.name?[f.Instance.getComponent(n.name,n.group)]:n.group?f.Instance.getGroupComponents(n.group,...n.names||[]):f.Instance.getComponents(...n.names||[])),i=(...l)=>{e("click",...l)},s=(...l)=>{e("save",...l)};return{id:n.id,type:n.type,value:n.value,name:n.name,names:n.names,group:n.group,metadata:n.metadata,disabled:n.disabled,readonly:n.readonly,click:i,save:s,Components:r,Value:t}}}),A=(n,e)=>{const t=n.__vccOpts||n;for(const[r,i]of e)t[r]=i;return t};function F(n,e,t,r,i,s){return o.openBlock(),o.createElementBlock("div",null,[(o.openBlock(!0),o.createElementBlock(o.Fragment,null,o.renderList(n.Components,(l,a)=>(o.openBlock(),o.createBlock(o.resolveDynamicComponent(l),{disabled:n.disabled,readonly:n.readonly,key:a,id:n.id,type:n.type,metadata:n.metadata,modelValue:n.Value,"onUpdate:modelValue":e[0]||(e[0]=u=>n.Value=u),onClick:n.click,onSave:n.save},null,40,["disabled","readonly","id","type","metadata","modelValue","onClick","onSave"]))),128))])}const T=A(G,[["render",F]]),w=class w{constructor(){d(this,"screens",new Map);d(this,"projecting",new Map)}static get Instance(){return w.instance}static set Instance(e){this.instance=e}setScreen(e,t="defaultscreen"){this.screens.set(t,e)}projectTo(e,t=null,r="defaultscreen",i=!0,s=!1){const l={data:t},a=s?new Promise((W,Y)=>{l.reject=Y,l.resolve=W}):null;i?(this.projecting.has(r)||this.projecting.set(r,[]),(this.projecting.get(r)||[]).push({component:e,model:l,promise:a,queue:i})):this.projecting.set(r,[{component:e,model:l,promise:a,queue:i}]);const u=this.screens.get(r);return u?(u.model=l,u.currentView=e,a&&a.then(()=>this.stopProjecting(r)).catch(()=>this.stopProjecting(r)),a):null}projectAsyncTo(e,t,r="defaultscreen",i=!0){return this.projectTo(e,t,r,i,!0)}stopProjecting(e="defaultscreen"){this.projecting.has(e)&&(this.projecting.get(e)||[]).pop();let t=this.screens.get(e);if(t&&t.currentView){if(t.model=null,t.screenModel=null,t.currentView=null,this.projecting.has(e)){let r=this.projecting.get(e);if(r&&r.length){let i=r.pop();i&&this.projectTo(i.component,i.model,e,i.queue,!!i.promise)}}return!0}return!1}};d(w,"instance",new w);let m=w;const z=o.defineComponent({name:"screen",props:{name:{type:String,default:"defaultscreen"}},setup(n,{expose:e}){const t=o.getCurrentInstance(),r=o.ref(null),i=o.ref(null);e({currentView:r,model:i});const s=o.computed(()=>r.value!=null),l=o.computed(()=>{var a;return(a=r.value)==null?void 0:a.__file});return o.onMounted(()=>{m.Instance.setScreen(t.proxy,n.name)}),{currentViewUID:l,currentView:r,model:i,isVisible:s}}});function K(n,e,t,r,i,s){return o.withDirectives((o.openBlock(),o.createElementBlock("div",null,[n.currentView?(o.openBlock(),o.createBlock(o.resolveDynamicComponent(n.currentView),{value:n.model,key:n.currentViewUID},null,8,["value"])):o.createCommentVNode("",!0)],512)),[[o.vShow,n.isVisible]])}const E=A(z,[["render",K]]),L={projectToDirective:{inserted:(n,e)=>{p.Instance.injectTo(n,e.arg)},unbind:(n,e)=>{p.Instance.removeFrom(n,e.arg)}},screenDirective:{bind:(n,e)=>{n&&p.Instance.setScreen(n,e.arg)}}},M=class M{constructor(){d(this,"screens",new Map)}static get Instance(){return M.instance}static set Instance(e){this.instance=e}injectTo(e,t){if(!(!e||!t)){var r=this.screens.has(t)?this.screens.get(t):null;try{e.parentElement&&e.removeChild(e)}catch{}r&&r.append(e)}}removeFrom(e,t){if(!(!e||!t)){var r=this.screens.has(t)?this.screens.get(t):null;try{r&&r.removeChild(e)}catch{}}}setScreen(e,t="defaultscreen"){this.screens.set(t,e)}};d(M,"instance",new M);let p=M;function y(n,e){if(n.target.validity){let t=n.target;if(t.validity){let r=[t.validity.badInput?"bad input":null,t.validity.customError?"custom error":null,t.validity.patternMismatch?"pattern mismatch":null,t.validity.rangeOverflow?"range overflow":null,t.validity.rangeUnderflow?"range underflow":null,t.validity.stepMismatch?"step mismatch":null,t.validity.tooLong?"too long":null,t.validity.tooShort?"too short":null,t.validity.typeMismatch?"type mismatch":null,t.validity.valueMissing?"value missing":null].filter(i=>!!i);e(r,t.validity.valid!=null?t.validity.valid:!0)}}}const $={inserted:(n,e)=>{if(!(!n||!n.willValidate)){switch(n.nodeName){case"INPUT":case"TEXTAREA":n.onblur=t=>y(t,e.value);break;case"SELECT":n.onchange=t=>y(t,e.value);break}n.oninvalid=t=>y(t,e.value),n.form&&n.form.addEventListener("invalid",()=>y({target:n},e.value)),e.arg=="immediate"?n.reportValidity():y({target:n},e.value)}},unbind:n=>{}};function X(n){n.component("screen",E),n.component("inject",T),n.directive("screen",L.screenDirective),n.directive("projectTo",L.projectToDirective),n.directive("validate",$)}function q(n){let e={};return{init(t,r,i,s){return s.registry&&(f.Instance=s.registry),s.messageService&&(S.Instance=s.messageService),s.projector&&(m.Instance=s.projector),s.screens&&(p.Instance=s.screens),e=i,n.init(O,t,r,i)},config(t,r){return n.config?n.config(t,r,e):null},run(t,r){return n.run?n.run(t,r,e):null},routes:n.routes}}async function x(n,e,t){const r=n.default.default||n.default;return r.init(h.Instance,e,t||{},{registry:f.Instance,messageService:S.Instance,projector:m.Instance,screens:p.Instance}).then(()=>r)}function H(n,e){return(n.default.default||n.default).config(h.Instance,e)}function J(n,e){return(n.default.default||n.default).run(h.Instance,e)}function Q(n){return(n.default.default||n.default).routes}const O={install:X,MenuHelper:new h,menuType:b,CommonRegistry:new f,MessageService:S,inject:T,screen:E,ValidateDirective:$,MenuNotifications:D,Projector:m};c.CommonRegistry=f,c.ConfigModule=H,c.InitModule=x,c.MenuHelper=h,c.MenuNotifications=D,c.MessageService=S,c.ModuleInitializer=q,c.ModuleRoutes=Q,c.Projector=m,c.RunModule=J,c.ValidateDirective=$,c.default=O,c.inject=T,c.menuType=b,c.screen=E,Object.defineProperties(c,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
