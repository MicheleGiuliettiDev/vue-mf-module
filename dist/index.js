(function(c,s){typeof exports=="object"&&typeof module<"u"?s(exports,require("vue")):typeof define=="function"&&define.amd?define(["exports","vue"],s):(c=typeof globalThis<"u"?globalThis:c||self,s(c.VueMfModule={},c.Vue))})(this,function(c,s){"use strict";var Z=Object.defineProperty;var _=(c,s,g)=>s in c?Z(c,s,{enumerable:!0,configurable:!0,writable:!0,value:g}):c[s]=g;var d=(c,s,g)=>(_(c,typeof s!="symbol"?s+"":s,g),g);var g={exports:{}};function V(){}V.prototype={on:function(e,t,n){var r=this.e||(this.e={});return(r[e]||(r[e]=[])).push({fn:t,ctx:n}),this},once:function(e,t,n){var r=this;function i(){r.off(e,i),t.apply(n,arguments)}return i._=t,this.on(e,i,n)},emit:function(e){var t=[].slice.call(arguments,1),n=((this.e||(this.e={}))[e]||[]).slice(),r=0,i=n.length;for(r;r<i;r++)n[r].fn.apply(n[r].ctx,t);return this},off:function(e,t){var n=this.e||(this.e={}),r=n[e],i=[];if(r&&t)for(var o=0,l=r.length;o<l;o++)r[o].fn!==t&&r[o].fn._!==t&&i.push(r[o]);return i.length?n[e]=i:delete n[e],this}},g.exports=V;var N=g.exports.TinyEmitter=V,b=(e=>(e[e.drawer=0]="drawer",e[e.bottom=1]="bottom",e[e.header=2]="header",e))(b||{});const D={menuDefinitionAdded:"newmenuitem"},I=class I{constructor(){d(this,"menuDefinitions",[]);d(this,"menuStructure",{});d(this,"notifications",new N)}get Notifications(){return this.notifications}static get Instance(){return I.instance}addMenuDefinition(t,...n){let r=this.menuDefinitions.find(i=>i.name==t.name);r?t=r:this.menuDefinitions.push(t);for(const i of n)this.menuStructure[i.section]=this.menuStructure[i.section]||{},this.menuStructure[i.section][i.parent||t.name]=this.menuStructure[i.section][i.parent||t.name]||[],i.parent&&this.menuStructure[i.section][i.parent].push(t.name);this.notifications.emit(D.menuDefinitionAdded,t)}getMenuItem(t){return this.menuDefinitions.find(n=>n.name==t)}getMenu(t){let n=[],r=new Set;for(const i in this.menuStructure[t]){const o=this.menuStructure[t][i];let l={item:this.menuDefinitions.find(a=>a.name==i&&(!a.hidden||!a.hidden())),children:o.map(a=>this.menuDefinitions.find(u=>u.name==a&&(!u.hidden||!u.hidden()))).filter(a=>!!a).sort((a,u)=>a&&u&&a.orderIndex&&u.orderIndex&&a.orderIndex>u.orderIndex?1:a&&u&&a.orderIndex&&u.orderIndex&&a.orderIndex<u.orderIndex?-1:0)};l.item&&(r.add(i),o.forEach(a=>r.add(a)),n.push(l))}return n.filter(i=>!!i.item).sort((i,o)=>i&&o&&i.item&&o.item&&i.item.orderIndex&&o.item.orderIndex&&i.item.orderIndex>o.item.orderIndex?1:i&&o&&i.item&&o.item&&i.item.orderIndex&&o.item.orderIndex&&i.item.orderIndex<o.item.orderIndex?-1:0)}};d(I,"instance",new I);let h=I;const k=class k{constructor(){d(this,"registry",new Map);d(this,"groupedregistry",new Map);d(this,"serviceregistry",new Map);d(this,"groupedserviceregistry",new Map)}static get Instance(){return this.instance}static set Instance(t){this.instance=t}provideComponent(t,n,r){if(this.registry.set(r?`${r}-${n}`:n,t),r){this.groupedregistry.has(r)||this.groupedregistry.set(r,new Map);let i=this.groupedregistry.get(r);i&&i.set(n,t)}}getComponent(t,n){return this.registry.get(n?`${n}-${t}`:t)||null}getComponents(...t){return Array.from(this.registry.entries()).filter(n=>t.indexOf(n[0])>=0).map(n=>n[1])}getGroupComponents(t,...n){let r=this.groupedregistry.get(t);return r?Array.from(r.entries()||[]).filter(i=>!n||n.length==0||n.indexOf(i[0])>=0).map(i=>i[1]):[]}getGroupComponentsKeys(t){let n=this.groupedregistry.get(t);return n?Array.from(n.keys()):[]}provideService(t,n,r){if(this.serviceregistry.set(t,n),r){this.groupedserviceregistry.has(r)||this.groupedserviceregistry.set(r,new Map);let i=this.groupedserviceregistry.get(r);i&&i.set(t,n)}}getService(t){return this.serviceregistry.get(t)||null}getGroupServices(t,...n){let r=this.groupedserviceregistry.get(t);return r?Array.from(r.entries()||[]).filter(i=>!n||n.length==0||n.indexOf(i[0])>=0).map(i=>i[1]):[]}};d(k,"instance",new k);let f=k;const j=new Map,v=new Map,C=new Map,P=(e,...t)=>new Promise(n=>{var l;let r=(l=j.get(e))==null?void 0:l.port1;if(!r){const a=new MessageChannel;j.set(e,a),r=a.port1}let i=new MessageChannel;const o=a=>{n(a.data),i=null};i.port1.onmessage=o,r.postMessage(t,[i.port2])}),R=(e,t,n={force:!1})=>{var o;let r=(o=j.get(e))==null?void 0:o.port2;if(!r){const l=new MessageChannel;j.set(e,l),r=l.port2}if(!n.force&&r.onmessage)throw"reply already set for message "+e;const i=async l=>{const a=l.ports[0],u=await t(...l.data);a.postMessage(u),a.close()};return r.onmessage=i,()=>{r.onmessage=null}},U=(e,...t)=>{var r;let n=(r=v.get(e))==null?void 0:r.port1;if(!n){const i=new MessageChannel;v.set(e,i),n=i.port1}n.postMessage(t)},B=(e,t)=>{var i;let n=(i=v.get(e))==null?void 0:i.port2;if(!n){const o=new MessageChannel;v.set(e,o),n=o.port2}const r=o=>{t(...o.data)};return C.set(t,r),n.addEventListener("message",r),n.start(),()=>{n==null||n.removeEventListener("message",r),C.delete(t)}},S={Instance:{ask:P,reply:R,send:U,subscribe:B,once:(e,t)=>{const n=B(e,(...r)=>{t(...r),n()})},unsubscribe:(e,t)=>{var i;let n=(i=v.get(e))==null?void 0:i.port2;if(!n)return;const r=C.get(t);r&&(n.removeEventListener("message",r),C.delete(t))}}},G=s.defineComponent({name:"inject",props:{id:{default:null},type:{default:null,type:String},value:{default:null},name:{type:String,default:null},names:{type:Array,default:null},group:{type:String,default:null},metadata:{type:Object,default:null},disabled:{type:Boolean,default:!1},readonly:{type:Boolean,default:!1}},setup(e,{emit:t}){const n=s.computed({get:()=>e.value,set:l=>{t("input",l)}}),r=s.computed(()=>e.name?[f.Instance.getComponent(e.name,e.group)]:e.group?f.Instance.getGroupComponents(e.group,...e.names||[]):f.Instance.getComponents(...e.names||[])),i=(...l)=>{t("click",...l)},o=(...l)=>{t("save",...l)};return{id:e.id,type:e.type,value:e.value,name:e.name,names:e.names,group:e.group,metadata:e.metadata,disabled:e.disabled,readonly:e.readonly,click:i,save:o,Components:r,Value:n}}}),A=(e,t)=>{const n=e.__vccOpts||e;for(const[r,i]of t)n[r]=i;return n};function F(e,t,n,r,i,o){return s.openBlock(),s.createElementBlock("div",null,[(s.openBlock(!0),s.createElementBlock(s.Fragment,null,s.renderList(e.Components,(l,a)=>(s.openBlock(),s.createBlock(s.resolveDynamicComponent(l),{disabled:e.disabled,readonly:e.readonly,key:a,id:e.id,type:e.type,metadata:e.metadata,modelValue:e.Value,"onUpdate:modelValue":t[0]||(t[0]=u=>e.Value=u),onClick:e.click,onSave:e.save},null,40,["disabled","readonly","id","type","metadata","modelValue","onClick","onSave"]))),128))])}const T=A(G,[["render",F]]),w=class w{constructor(){d(this,"screens",new Map);d(this,"projecting",new Map)}static get Instance(){return w.instance}static set Instance(t){this.instance=t}setScreen(t,n="defaultscreen"){this.screens.set(n,t)}projectTo(t,n=null,r="defaultscreen",i=!0,o=!1){const l={data:n},a=o?new Promise((W,Y)=>{l.reject=Y,l.resolve=W}):null;i?(this.projecting.has(r)||this.projecting.set(r,[]),(this.projecting.get(r)||[]).push({component:t,model:l,promise:a,queue:i})):this.projecting.set(r,[{component:t,model:l,promise:a,queue:i}]);const u=this.screens.get(r);return u?(u.model=l,u.currentView=t,a&&a.then(()=>this.stopProjecting(r)).catch(()=>this.stopProjecting(r)),a):null}projectAsyncTo(t,n,r="defaultscreen",i=!0){return this.projectTo(t,n,r,i,!0)}stopProjecting(t="defaultscreen"){this.projecting.has(t)&&(this.projecting.get(t)||[]).pop();let n=this.screens.get(t);if(n&&n.currentView){if(n.model=null,n.screenModel=null,n.currentView=null,this.projecting.has(t)){let r=this.projecting.get(t);if(r&&r.length){let i=r.pop();i&&this.projectTo(i.component,i.model,t,i.queue,!!i.promise)}}return!0}return!1}};d(w,"instance",new w);let m=w;const z=s.defineComponent({name:"screen",props:{name:{type:String,default:"defaultscreen"}},setup(e,{expose:t}){const n=s.getCurrentInstance(),r=s.ref(null),i=s.ref(null);t({currentView:r,model:i});const o=s.computed(()=>r.value!=null),l=s.computed(()=>{var a;return(a=r.value)==null?void 0:a.__file});return s.onMounted(()=>{m.Instance.setScreen(n.proxy,e.name)}),{currentViewUID:l,currentView:r,model:i,isVisible:o}}});function K(e,t,n,r,i,o){return s.withDirectives((s.openBlock(),s.createElementBlock("div",null,[e.currentView?(s.openBlock(),s.createBlock(s.resolveDynamicComponent(e.currentView),{value:e.model,key:e.currentViewUID},null,8,["value"])):s.createCommentVNode("",!0)],512)),[[s.vShow,e.isVisible]])}const E=A(z,[["render",K]]),L={projectToDirective:{inserted:(e,t)=>{p.Instance.injectTo(e,t.arg)},unbind:(e,t)=>{p.Instance.removeFrom(e,t.arg)}},screenDirective:{bind:(e,t)=>{e&&p.Instance.setScreen(e,t.arg)}}},M=class M{constructor(){d(this,"screens",new Map)}static get Instance(){return M.instance}static set Instance(t){this.instance=t}injectTo(t,n){if(!(!t||!n)){var r=this.screens.has(n)?this.screens.get(n):null;try{t.parentElement&&t.removeChild(t)}catch{}r&&r.append(t)}}removeFrom(t,n){if(!(!t||!n)){var r=this.screens.has(n)?this.screens.get(n):null;try{r&&r.removeChild(t)}catch{}}}setScreen(t,n="defaultscreen"){this.screens.set(n,t)}};d(M,"instance",new M);let p=M;function y(e,t){if(e.target.validity){let n=e.target;if(n.validity){let r=[n.validity.badInput?"bad input":null,n.validity.customError?"custom error":null,n.validity.patternMismatch?"pattern mismatch":null,n.validity.rangeOverflow?"range overflow":null,n.validity.rangeUnderflow?"range underflow":null,n.validity.stepMismatch?"step mismatch":null,n.validity.tooLong?"too long":null,n.validity.tooShort?"too short":null,n.validity.typeMismatch?"type mismatch":null,n.validity.valueMissing?"value missing":null].filter(i=>!!i);t(r,n.validity.valid!=null?n.validity.valid:!0)}}}const $={inserted:(e,t)=>{if(!(!e||!e.willValidate)){switch(e.nodeName){case"INPUT":case"TEXTAREA":e.onblur=n=>y(n,t.value);break;case"SELECT":e.onchange=n=>y(n,t.value);break}e.oninvalid=n=>y(n,t.value),e.form&&e.form.addEventListener("invalid",()=>y({target:e},t.value)),t.arg=="immediate"?e.reportValidity():y({target:e},t.value)}},unbind:e=>{}};function X(e){e.component("screen",E),e.component("inject",T),e.directive("screen",L.screenDirective),e.directive("projectTo",L.projectToDirective),e.directive("validate",$)}function q(e){let t={};return{init(n,r,i){return i.registry&&(f.Instance=i.registry),i.messageService&&(S.Instance=i.messageService),i.projector&&(m.Instance=i.projector),i.screens&&(p.Instance=i.screens),t=r,e.init(O,n,r)},config(n){return e.config?e.config(n,t):null},run(n){return e.run?e.run(n,t):null},routes:e.routes}}async function x(e,t){const n=e.default.default||e.default;return n.init(h.Instance,t||{},{registry:f.Instance,messageService:S.Instance,projector:m.Instance,screens:p.Instance}).then(()=>n)}function H(e){return(e.default.default||e.default).config(h.Instance)}function J(e){return(e.default.default||e.default).run(h.Instance)}function Q(e){return(e.default.default||e.default).routes}const O={install:X,MenuHelper:new h,menuType:b,CommonRegistry:new f,MessageService:S,inject:T,screen:E,ValidateDirective:$,MenuNotifications:D,Projector:m};c.CommonRegistry=f,c.ConfigModule=H,c.InitModule=x,c.MenuHelper=h,c.MenuNotifications=D,c.MessageService=S,c.ModuleInitializer=q,c.ModuleRoutes=Q,c.Projector=m,c.RunModule=J,c.ValidateDirective=$,c.default=O,c.inject=T,c.menuType=b,c.screen=E,Object.defineProperties(c,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
